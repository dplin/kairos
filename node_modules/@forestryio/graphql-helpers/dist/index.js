"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/util.ts
var _lodashcamelcase = require('lodash.camelcase'); var _lodashcamelcase2 = _interopRequireDefault(_lodashcamelcase);
var _lodashupperfirst = require('lodash.upperfirst'); var _lodashupperfirst2 = _interopRequireDefault(_lodashupperfirst);
var _lodashkebabcase = require('lodash.kebabcase'); var _lodashkebabcase2 = _interopRequireDefault(_lodashkebabcase);
const friendlyName = (field, options) => {
  const lowerCase = options && options.lowerCase || false;
  const suffix = options && options.suffix || "";
  let transform = (word) => _lodashupperfirst2.default.call(void 0, _lodashcamelcase2.default.call(void 0, word));
  if (lowerCase) {
    transform = (word) => _lodashcamelcase2.default.call(void 0, word);
  }
  if (Array.isArray(field)) {
    return `${field.map((f) => transform(f)).join("_")}${suffix && "_" + suffix}`;
  } else {
    if (typeof field === "string") {
      if (field) {
        return `${transform(field)}${suffix ? "_" + suffix : ""}`;
      } else {
        return suffix;
      }
    } else {
      return `${field.__namespace ? transform(field.__namespace) + "_" : ""}${transform(field.name)}${suffix && "_" + suffix}`;
    }
  }
};
const templateName = (string) => {
  return _lodashkebabcase2.default.call(void 0, string);
};
const templateTypeName = (template, suffix, includeBody) => {
  const suffixName = (includeBody ? "Doc_" : "") + suffix;
  return friendlyName(template, {suffix: suffixName});
};

// src/fieldInterpretter.ts




var _graphql = require('graphql');
var _lodashget = require('lodash.get'); var _lodashget2 = _interopRequireDefault(_lodashget);
class FieldInterpretter {
  constructor({mutationName, fieldName, docAst, paramInputType}) {
    this.mutationName = mutationName;
    this.fieldName = fieldName;
    this.docAst = docAst;
    this.paramInputType = paramInputType;
  }
}
const getFieldInterpretter = (namedType, args) => {
  if (namedType instanceof _graphql.GraphQLUnionType && namedType.name === "SectionDocumentUnion") {
    return new SectionDocumentUnionInterpretter(args);
  }
  if (namedType instanceof _graphql.GraphQLObjectType) {
    return new GraphQLObjectTypeInterpretter(args);
  }
  return;
};
class SectionDocumentUnionInterpretter extends FieldInterpretter {
  getQuery() {
    return {
      kind: "Document",
      definitions: [
        {
          kind: "OperationDefinition",
          operation: "query",
          name: {
            kind: "Name",
            value: this.fieldName
          },
          variableDefinitions: [
            {
              kind: "VariableDefinition",
              variable: {
                kind: "Variable",
                name: {
                  kind: "Name",
                  value: "section"
                }
              },
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: {
                    kind: "Name",
                    value: "String"
                  }
                }
              }
            },
            {
              kind: "VariableDefinition",
              variable: {
                kind: "Variable",
                name: {
                  kind: "Name",
                  value: "relativePath"
                }
              },
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: {
                    kind: "Name",
                    value: "String"
                  }
                }
              }
            }
          ],
          selectionSet: {
            kind: "SelectionSet",
            selections: [
              {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: this.fieldName
                },
                arguments: [
                  {
                    kind: "Argument",
                    name: {
                      kind: "Name",
                      value: "relativePath"
                    },
                    value: {
                      kind: "Variable",
                      name: {
                        kind: "Name",
                        value: "relativePath"
                      }
                    }
                  }
                ],
                directives: [],
                selectionSet: this.docAst.selectionSet
              }
            ]
          }
        }
      ]
    };
  }
  getMutation() {
    var _a;
    return {
      kind: "Document",
      definitions: [
        {
          kind: "OperationDefinition",
          operation: "mutation",
          name: {
            kind: "Name",
            value: this.mutationName
          },
          variableDefinitions: [
            {
              kind: "VariableDefinition",
              variable: {
                kind: "Variable",
                name: {
                  kind: "Name",
                  value: "relativePath"
                }
              },
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: {
                    kind: "Name",
                    value: "String"
                  }
                }
              }
            },
            {
              kind: "VariableDefinition",
              variable: {
                kind: "Variable",
                name: {
                  kind: "Name",
                  value: "params"
                }
              },
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: {
                    kind: "Name",
                    value: _graphql.getNamedType.call(void 0, (_a = this.paramInputType) == null ? void 0 : _a.type).name
                  }
                }
              }
            }
          ],
          selectionSet: {
            kind: "SelectionSet",
            selections: [
              {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: this.mutationName
                },
                arguments: [
                  {
                    kind: "Argument",
                    name: {
                      kind: "Name",
                      value: "relativePath"
                    },
                    value: {
                      kind: "Variable",
                      name: {
                        kind: "Name",
                        value: "relativePath"
                      }
                    }
                  },
                  {
                    kind: "Argument",
                    name: {
                      kind: "Name",
                      value: "params"
                    },
                    value: {
                      kind: "Variable",
                      name: {
                        kind: "Name",
                        value: "params"
                      }
                    }
                  }
                ],
                directives: [],
                selectionSet: this.docAst.selectionSet
              }
            ]
          }
        }
      ]
    };
  }
  getDataPath(path, ancestors) {
    let dataPath = [];
    const anc = ancestors[0];
    const pathAccum = [];
    path.map((p, i) => {
      var _a;
      pathAccum.push(p);
      const item = _lodashget2.default.call(void 0, anc, pathAccum);
      if (Array.isArray(item)) {
      } else {
        switch (item.kind) {
          case "OperationDefinition":
            break;
          case "SelectionSet":
            break;
          case "InlineFragment":
            break;
          case "Field":
            dataPath.push((_a = item.name) == null ? void 0 : _a.value);
            break;
        }
      }
    });
    return dataPath;
  }
}
class GraphQLObjectTypeInterpretter extends FieldInterpretter {
  getQuery() {
    return {
      kind: "Document",
      definitions: [
        {
          kind: "OperationDefinition",
          operation: "query",
          name: {
            kind: "Name",
            value: this.fieldName
          },
          variableDefinitions: [
            {
              kind: "VariableDefinition",
              variable: {
                kind: "Variable",
                name: {
                  kind: "Name",
                  value: "relativePath"
                }
              },
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: {
                    kind: "Name",
                    value: "String"
                  }
                }
              }
            }
          ],
          selectionSet: {
            kind: "SelectionSet",
            selections: [
              {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: this.fieldName
                },
                arguments: [
                  {
                    kind: "Argument",
                    name: {
                      kind: "Name",
                      value: "relativePath"
                    },
                    value: {
                      kind: "Variable",
                      name: {
                        kind: "Name",
                        value: "relativePath"
                      }
                    }
                  }
                ],
                directives: [],
                selectionSet: this.docAst.selectionSet
              }
            ]
          }
        }
      ]
    };
  }
  getMutation() {
    var _a;
    return {
      kind: "Document",
      definitions: [
        {
          kind: "OperationDefinition",
          operation: "mutation",
          name: {
            kind: "Name",
            value: this.mutationName
          },
          variableDefinitions: [
            {
              kind: "VariableDefinition",
              variable: {
                kind: "Variable",
                name: {
                  kind: "Name",
                  value: "relativePath"
                }
              },
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: {
                    kind: "Name",
                    value: "String"
                  }
                }
              }
            },
            {
              kind: "VariableDefinition",
              variable: {
                kind: "Variable",
                name: {
                  kind: "Name",
                  value: "params"
                }
              },
              type: {
                kind: "NonNullType",
                type: {
                  kind: "NamedType",
                  name: {
                    kind: "Name",
                    value: _graphql.getNamedType.call(void 0, (_a = this.paramInputType) == null ? void 0 : _a.type).name
                  }
                }
              }
            }
          ],
          selectionSet: {
            kind: "SelectionSet",
            selections: [
              {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: this.mutationName
                },
                arguments: [
                  {
                    kind: "Argument",
                    name: {
                      kind: "Name",
                      value: "relativePath"
                    },
                    value: {
                      kind: "Variable",
                      name: {
                        kind: "Name",
                        value: "relativePath"
                      }
                    }
                  },
                  {
                    kind: "Argument",
                    name: {
                      kind: "Name",
                      value: "params"
                    },
                    value: {
                      kind: "Variable",
                      name: {
                        kind: "Name",
                        value: "params"
                      }
                    }
                  }
                ],
                directives: [],
                selectionSet: this.docAst.selectionSet
              }
            ]
          }
        }
      ]
    };
  }
  getDataPath(path, ancestors) {
    let dataPath = [];
    const anc = ancestors[0];
    const pathAccum = [];
    path.map((p, i) => {
      pathAccum.push(p);
      const item = _lodashget2.default.call(void 0, anc, pathAccum);
      if (Array.isArray(item)) {
      } else {
        switch (item.kind) {
          case "OperationDefinition":
            break;
          case "SelectionSet":
            break;
          case "InlineFragment":
            break;
          case "Field":
            const value = item.alias ? item.alias.value : item.name.value;
            dataPath.push(value);
        }
      }
    });
    return dataPath;
  }
}

// src/queryBuilder.ts












var _lodashset = require('lodash.set'); var _lodashset2 = _interopRequireDefault(_lodashset);

const formify = (query, schema) => {
  const typeInfo = new (0, _graphql.TypeInfo)(schema);
  const pathsToPopulate = [];
  const visitor = {
    leave(node, key, parent, path, ancestors) {
      const type = typeInfo.getType();
      if (type) {
        const namedType = _graphql.getNamedType.call(void 0, type);
        if (namedType instanceof _graphql.GraphQLObjectType) {
          const hasNodeInterface = !!namedType.getInterfaces().find((i) => i.name === "Node");
          if (hasNodeInterface) {
            if (typeof path[path.length - 1] === "number") {
              assertIsObjectType(namedType);
              const valuesNode = namedType.getFields().values;
              const namedValuesNode = _graphql.getNamedType.call(void 0, valuesNode.type);
              const pathForValues = [...path];
              pathForValues.push("selectionSet");
              pathForValues.push("selections");
              const valuesAst = buildValuesForType(namedValuesNode);
              pathForValues.push(100);
              const formNode = namedType.getFields().form;
              const namedFormNode = _graphql.getNamedType.call(void 0, formNode.type);
              const pathForForm = [...path];
              pathForForm.push("selectionSet");
              pathForForm.push("selections");
              const formAst = buildFormForType(namedFormNode);
              pathForForm.push(101);
              const sysNode = namedType.getFields().sys;
              const namedSysNode = _graphql.getNamedType.call(void 0, sysNode.type);
              const pathForSys = [...path];
              pathForSys.push("selectionSet");
              pathForSys.push("selections");
              const sysAst = buildSysForType(namedSysNode);
              pathForSys.push(102);
              pathsToPopulate.push({
                path: path.map((p) => p.toString()).join("-"),
                paths: [
                  {
                    path: pathForValues.map((p) => p.toString()),
                    ast: valuesAst
                  },
                  {
                    path: pathForForm.map((p) => p.toString()),
                    ast: formAst
                  },
                  {
                    path: pathForSys.map((p) => p.toString()),
                    ast: sysAst
                  }
                ]
              });
            }
          }
        }
      }
    }
  };
  _graphql.visit.call(void 0, query, _graphql.visitWithTypeInfo.call(void 0, typeInfo, visitor));
  const topLevelPaths = pathsToPopulate.filter((p, i) => {
    const otherPaths = pathsToPopulate.filter((_, index) => index !== i);
    const isChildOfOtherPaths = otherPaths.some((op) => {
      if (p.path.startsWith(op.path)) {
        return true;
      } else {
        return false;
      }
    });
    if (isChildOfOtherPaths) {
      return false;
    } else {
      return true;
    }
  });
  topLevelPaths.map((p) => {
    p.paths.map((pathNode) => {
      _lodashset2.default.call(void 0, query, pathNode.path, pathNode.ast);
    });
  });
  return query;
};
const buildSysForType = (type) => {
  assertIsObjectType(type);
  return {
    kind: "Field",
    alias: {
      kind: "Name",
      value: "_internalSys"
    },
    name: {
      kind: "Name",
      value: "sys"
    },
    selectionSet: {
      kind: "SelectionSet",
      selections: buildSelectionsFields(Object.values(type.getFields()), (fields) => {
        return {
          continue: true,
          filteredFields: fields.filter((field) => field.name !== "documents")
        };
      })
    }
  };
};
const buildValuesForType = (type) => {
  assertIsUnionType(type);
  return {
    kind: "Field",
    name: {
      kind: "Name",
      value: "values"
    },
    selectionSet: {
      kind: "SelectionSet",
      selections: buildSelectionInlineFragments(type.getTypes())
    }
  };
};
const buildFormForType = (type) => {
  assertIsUnionType(type);
  return {
    kind: "Field",
    name: {
      kind: "Name",
      value: "form"
    },
    selectionSet: {
      kind: "SelectionSet",
      selections: buildSelectionInlineFragments(type.getTypes())
    }
  };
};
const buildSelectionInlineFragments = (types, callback) => {
  return types.map((type) => {
    return {
      kind: "InlineFragment",
      typeCondition: {
        kind: "NamedType",
        name: {
          kind: "Name",
          value: type.name
        }
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          ...Object.values(type.getFields()).map((field) => {
            const namedType = _graphql.getNamedType.call(void 0, field.type);
            if (_graphql.isLeafType.call(void 0, namedType)) {
              return {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: field.name
                }
              };
            } else if (namedType instanceof _graphql.GraphQLUnionType) {
              return {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: field.name
                },
                selectionSet: {
                  kind: "SelectionSet",
                  selections: [
                    ...buildSelectionInlineFragments(namedType.getTypes(), callback)
                  ]
                }
              };
            } else if (namedType instanceof _graphql.GraphQLObjectType) {
              return {
                kind: "Field",
                name: {
                  kind: "Name",
                  value: field.name
                },
                selectionSet: {
                  kind: "SelectionSet",
                  selections: [
                    ...buildSelectionsFields(Object.values(namedType.getFields()), callback)
                  ]
                }
              };
            } else {
              throw new Error(`Unexpected GraphQL type for field ${namedType.name}`);
            }
          })
        ]
      }
    };
  });
};
const buildSelectionsFields = (fields, callback) => {
  let filteredFields = fields;
  if (callback) {
    const result = callback(fields);
    if (!result.continue) {
      if (fields.every((field) => {
        return !_graphql.isScalarType.call(void 0, _graphql.getNamedType.call(void 0, field.type));
      })) {
        return [
          {
            kind: "Field",
            name: {
              kind: "Name",
              value: "__typename"
            }
          }
        ];
      }
      return buildSelectionsFields(result.filteredFields.filter((field) => {
        if (_graphql.isScalarType.call(void 0, _graphql.getNamedType.call(void 0, field.type))) {
          return true;
        }
        return false;
      }));
    } else {
      filteredFields = result.filteredFields;
    }
  }
  return filteredFields.map((field) => {
    const namedType = _graphql.getNamedType.call(void 0, field.type);
    if (_graphql.isLeafType.call(void 0, namedType)) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        }
      };
    } else if (namedType instanceof _graphql.GraphQLUnionType) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            ...buildSelectionInlineFragments(namedType.getTypes(), callback)
          ]
        }
      };
    } else if (namedType instanceof _graphql.GraphQLObjectType) {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            ...buildSelectionsFields(Object.values(namedType.getFields()), callback)
          ]
        }
      };
    } else {
      return {
        kind: "Field",
        name: {
          kind: "Name",
          value: field.name
        },
        selectionSet: {
          kind: "SelectionSet",
          selections: []
        }
      };
    }
  });
};
const splitQuery = (args) => {
  const {schema} = args;
  const typeInfo = new (0, _graphql.TypeInfo)(schema);
  const queryType = schema.getQueryType();
  const mutationType = schema.getMutationType();
  const queries = {};
  const fragmentDefinitions = [];
  const fragmentSpreads = [];
  const queryAst = _graphql.parse.call(void 0, args.queryString);
  const visitor = {
    leave: {
      FragmentDefinition(node, key, parent, path) {
        fragmentDefinitions.push({
          name: node.name.value,
          path: [...path],
          fragment: _graphql.print.call(void 0, node),
          subFragments: []
        });
      },
      FragmentSpread(node, key, parent, path) {
        fragmentSpreads.push({
          path: [...path],
          fragment: node.name.value
        });
      },
      Field(node, key, parent, path, ancestors) {
        const type = typeInfo.getType();
        if (type) {
          const namedType = _graphql.getNamedType.call(void 0, type);
          const isGraphQLUnionType = namedType instanceof _graphql.GraphQLUnionType && namedType.name === "SectionDocumentUnion";
          const isGraphQLObjectType = namedType instanceof _graphql.GraphQLObjectType;
          if (!isGraphQLUnionType && !isGraphQLObjectType) {
            return;
          }
          if (namedType instanceof _graphql.GraphQLObjectType && !namedType.getInterfaces().find((i) => i.name === "Node")) {
            return;
          }
          const f = Object.values(queryType == null ? void 0 : queryType.getFields()).find((field) => {
            const queryNamedType = _graphql.getNamedType.call(void 0, field.type);
            return queryNamedType.name === namedType.name;
          });
          const mutationFields = mutationType == null ? void 0 : mutationType.getFields();
          if (!mutationFields) {
            throw new Error("oh no");
          }
          const m = Object.values(mutationFields).find((field) => {
            const mutationNamedType = _graphql.getNamedType.call(void 0, field.type);
            return mutationNamedType.name === namedType.name;
          });
          if (!f) {
            throw new Error("oh no");
          }
          const paramInputType = m == null ? void 0 : m.args.find((arg) => {
            return arg.name === "params";
          });
          if (!paramInputType) {
            throw new Error("oh no");
          }
          if (!m) {
            throw new Error("oh no");
          }
          const docAst = _lodashget2.default.call(void 0, queryAst, path);
          const fieldInterpretter2 = getFieldInterpretter(namedType, {
            mutationName: m.name,
            fieldName: f.name,
            docAst,
            paramInputType
          });
          if (!fieldInterpretter2) {
            return;
          }
          const newQuery = fieldInterpretter2.getQuery();
          const newMutation = fieldInterpretter2.getMutation();
          let dataPath = fieldInterpretter2.getDataPath(path, ancestors);
          const pathCopy = [...path];
          queries[dataPath.join(".")] = {
            query: _graphql.print.call(void 0, newQuery),
            mutation: _graphql.print.call(void 0, newMutation),
            fragments: [],
            path: pathCopy
          };
        }
      }
    }
  };
  _graphql.visit.call(void 0, queryAst, _graphql.visitWithTypeInfo.call(void 0, typeInfo, visitor));
  fragmentDefinitions.forEach((fragmentDefinition) => {
    fragmentSpreads.forEach((fragmentSpread) => {
      if (hasSubArray(fragmentSpread.path, fragmentDefinition.path)) {
        fragmentDefinition.subFragments.push(fragmentSpread.fragment);
      }
    });
  });
  const recursiveFragmentSpread = (fragmentName, fragmentDefinitionItems, accumulator) => {
    const fragmentDefinition = fragmentDefinitions.find(({name}) => fragmentName === name);
    if (!fragmentDefinition) {
      throw new Error(`Expected to find a fragment definition for ${fragmentName}`);
    }
    if ((fragmentDefinition == null ? void 0 : fragmentDefinition.subFragments.length) > 0) {
      fragmentDefinition == null ? void 0 : fragmentDefinition.subFragments.map((subFragment) => {
        accumulator.push(subFragment);
        const subFragmentDefinition = fragmentDefinitionItems.find(({name}) => subFragment === name);
        if (!subFragmentDefinition) {
          throw new Error(`Expected to find a fragment definition for ${subFragment}`);
        }
        if ((subFragmentDefinition == null ? void 0 : subFragmentDefinition.subFragments.length) > 0) {
          recursiveFragmentSpread(subFragmentDefinition.name, fragmentDefinitionItems, accumulator);
        }
      });
    }
  };
  const keys = Object.keys(queries);
  Object.values(queries).forEach((query, index) => {
    const fragmentsForQuery = [];
    fragmentSpreads.forEach((fragmentSpread) => {
      if (hasSubArray(fragmentSpread.path, query.path)) {
        fragmentsForQuery.push(fragmentSpread.fragment);
        recursiveFragmentSpread(fragmentSpread.fragment, fragmentDefinitions, fragmentsForQuery);
      }
    });
    if (fragmentsForQuery.length > 0) {
    } else {
    }
    query.fragments = fragmentsForQuery;
  });
  return {queries, fragments: fragmentDefinitions};
};
const hasSubArray = (main, sub) => {
  return sub.every((item, index) => {
    return main[index] === item;
  });
};
function assertIsObjectType(type) {
  if (type instanceof _graphql.GraphQLObjectType) {
  } else {
    throw new Error(`Expected an instance of GraphQLObjectType for type ${type.name}`);
  }
}
function assertIsUnionType(type) {
  if (type instanceof _graphql.GraphQLUnionType) {
  } else {
    throw new Error(`Expected an instance of GraphQLUnionType for type ${type.name}`);
  }
}

// src/dummy-generators.ts




const queryGenerator = (variables, schema) => {
  const t = schema.getQueryType();
  const queryFields = t == null ? void 0 : t.getFields();
  if (queryFields) {
    const queryName = `get${friendlyName(variables.collection)}Document`;
    const queryField = queryFields[queryName];
    const returnType = _graphql.getNamedType.call(void 0, queryField.type);
    if (returnType instanceof _graphql.GraphQLObjectType) {
      let depth = 0;
      const fields = buildSelectionsFields(Object.values(returnType.getFields()).filter((field) => field.name === "data"), (fields2) => {
        const filteredFieldsList = [
          "sys",
          "__typename",
          "template",
          "html",
          "form",
          "values",
          "markdownAst"
        ];
        depth = depth + 1;
        const filteredFields = fields2.filter((field) => {
          return !filteredFieldsList.includes(field.name);
        });
        return {continue: depth < 5, filteredFields};
      });
      return {
        kind: "Document",
        definitions: [
          {
            kind: "OperationDefinition",
            operation: "query",
            name: {
              kind: "Name",
              value: queryName
            },
            variableDefinitions: [
              {
                kind: "VariableDefinition",
                variable: {
                  kind: "Variable",
                  name: {
                    kind: "Name",
                    value: "relativePath"
                  }
                },
                type: {
                  kind: "NonNullType",
                  type: {
                    kind: "NamedType",
                    name: {
                      kind: "Name",
                      value: "String"
                    }
                  }
                }
              }
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: {
                    kind: "Name",
                    value: queryName
                  },
                  arguments: [
                    {
                      kind: "Argument",
                      name: {
                        kind: "Name",
                        value: "relativePath"
                      },
                      value: {
                        kind: "Variable",
                        name: {
                          kind: "Name",
                          value: "relativePath"
                        }
                      }
                    }
                  ],
                  directives: [],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: fields
                  }
                }
              ]
            }
          }
        ]
      };
    } else {
      throw new Error("Expected return type to be an instance of GraphQLObject");
    }
  } else {
    throw new Error("Unable to find query fields for provided schema");
  }
};

// src/index.ts







exports.formify = formify; exports.friendlyName = friendlyName; exports.queryGenerator = queryGenerator; exports.splitQuery = splitQuery; exports.templateName = templateName; exports.templateTypeName = templateTypeName;
