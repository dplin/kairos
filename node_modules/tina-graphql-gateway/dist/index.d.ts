import { GraphQLSchema, DocumentNode as DocumentNode$1 } from 'graphql';
import gql from 'graphql-tag';
import { MediaStore, MediaUploadOptions, Media, MediaListOptions, MediaList } from '@tinacms/core';
import React from 'react';
import { TinaCMS, FormOptions, Form } from 'tinacms';
import { StateSchema } from 'xstate';

declare type TokenObject = {
    id_token: string;
    access_token: string;
    refresh_token: string;
};

declare class ForestryMediaStore implements MediaStore {
    private client;
    accept: string;
    constructor(client: Client);
    persist(files: MediaUploadOptions[]): Promise<Media[]>;
    previewSrc(src: string): Promise<string>;
    list(options?: MediaListOptions): Promise<MediaList>;
    delete(media: Media): Promise<void>;
}

interface ServerOptions {
    organizationId: string;
    clientId: string;
    branch: string;
    customContentApiUrl?: string;
    getTokenFn?: () => TokenObject;
    tokenStorage?: "MEMORY" | "LOCAL_STORAGE" | "CUSTOM";
}
declare class Client {
    contentApiUrl: string;
    organizationId: string;
    schema: GraphQLSchema;
    clientId: string;
    query: string;
    setToken: (_token: TokenObject) => void;
    private getToken;
    private token;
    constructor({ tokenStorage, ...options }: ServerOptions);
    addPendingContent: (props: any) => Promise<unknown>;
    getSchema: () => Promise<GraphQLSchema>;
    prepareVariables: ({ mutationString, relativePath, values, sys, }: {
        mutationString: string;
        relativePath: string;
        values: object;
        sys: {
            template: string;
            collection: {
                slug: string;
            };
        };
    }) => Promise<{
        relativePath: string;
        params: object;
    }>;
    requestWithForm<ReturnType>(query: (gqlTag: typeof gql) => DocumentNode$1, { variables }: {
        variables: any;
    }): Promise<ReturnType>;
    request<ReturnType>(query: ((gqlTag: typeof gql) => DocumentNode$1) | string, { variables }: {
        variables: object;
    }): Promise<ReturnType>;
    isAuthorized(): Promise<boolean>;
    isLocalClient(): boolean;
    isAuthenticated(): Promise<boolean>;
    authenticate(): Promise<TokenObject>;
    getUser(): Promise<any>;
}
declare const DEFAULT_LOCAL_TINA_GQL_SERVER_URL = "http://localhost:4001/graphql";
declare class LocalClient extends Client {
    constructor(props?: {
        customContentApiUrl?: string;
    });
}

interface TinaCloudAuthWallProps {
    cms: TinaCMS;
    children: React.ReactNode;
    loginScreen?: React.ReactNode;
    getModalActions?: (args: {
        closeModal: () => void;
    }) => {
        name: string;
        action: () => Promise<void>;
        primary: boolean;
    }[];
}
declare const AuthWallInner: ({ children, cms, loginScreen, getModalActions }: TinaCloudAuthWallProps) => JSX.Element;
/**
 * Provides an authentication wall so Tina is not enabled without a valid user session.
 *
 * Note: this will not restrict access for local filesystem clients
 */
declare const TinaCloudAuthWall: (props: TinaCloudAuthWallProps) => JSX.Element;

/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
declare const useTinaAuthRedirect: () => void;

declare type OnNewDocument = (args: {
    collection: {
        slug: string;
    };
    relativePath: string;
    breadcrumbs: string[];
    path: string;
}) => void;

interface FormifyArgs {
    formConfig: FormOptions<any>;
    createForm: (formConfig: FormOptions<any>) => Form;
    skip?: () => void;
}
declare type formifyCallback = (args: FormifyArgs) => Form | void;
interface FormsMachineSchemaType extends StateSchema {
    states: {
        initializing: any;
        inactive: any;
        active: any;
    };
}
declare type toggleMachineStateValue = keyof FormsMachineSchemaType["states"];
declare type FilterCollections = (options: {
    label: string;
    value: string;
}[]) => {
    label: string;
    value: string;
}[];
declare const useDocumentCreatorPlugin: (onNewDocument?: OnNewDocument, filterCollections?: FilterCollections) => void;
declare function useGraphqlForms<T extends object>({ query, variables, onSubmit, formify, }: {
    query: (gqlTag: typeof gql) => DocumentNode$1;
    variables: object;
    onSubmit?: (args: {
        queryString: string;
        variables: object;
    }) => void;
    formify?: formifyCallback;
}): [T, Boolean];
declare type Field = {
    __typename: string;
    name: string;
    label: string;
    component: string;
};
declare type DocumentNode = {
    _internalSys: {
        filename: string;
        relativePath: string;
        basename: string;
        path: string;
    };
    form: {
        __typename: string;
        fields: Field[];
        label: string;
        name: string;
    };
    values: {
        [key: string]: string | string[] | object | object[];
    };
    data: {
        [key: string]: string | string[] | object | object[];
    };
    initialData: {
        [key: string]: string | string[] | object | object[];
    };
};

/**
 * A passthru function which allows editors
 * to know the temlpate string is a GraphQL
 * query or muation
 */
declare function graphql(strings: TemplateStringsArray): string;

export { AuthWallInner, Client, DEFAULT_LOCAL_TINA_GQL_SERVER_URL, DocumentNode, FilterCollections, ForestryMediaStore, FormifyArgs, LocalClient, TinaCloudAuthWall, TinaCloudAuthWallProps, formifyCallback, graphql, toggleMachineStateValue, useDocumentCreatorPlugin, useGraphqlForms, useTinaAuthRedirect };
